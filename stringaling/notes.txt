--- Star Date 20230531 ---

Don't ask why, but I am going to make a Java program and use the Zing VM.

--- Star Date 20230522 --- 
  unreal thoughts and shit ----

I only started this project because of a YouTube video by CodeReport that used a string for numerical values and he used a modulo to determine if the number was even or not.
My immediate thought was horror at this solution.  It was the most junior dev thing I ever saw.  I haven't been able to get a single developer/programmer/engineer gig in over 5 years with 
20+ years of experience have to take an IT Director role at school which I hate. So having a video of a senior dev making 2 possibly expensive mistakes in programming disgusted me. This is why Casey, Jonathon Blow, and others have been beating the drums on Clean Code and Uncle Bob's horrible experiment to go along with Agile.  You have clown cars putting out code fast in shit languages with shittier understanding of how computers operate.  Sometimes I wonder what would happen if someone tried to port Id's DOOM to C# and Unity or Java and a Java game engine at the same resolutions just to see how much slower it runs compared to taking the original game and running it on today's computers.  The good thing is I learned Rust and it's ok, but it has a long way to go. Rust does have security problems in the future if it goes main stream.  I am not against Rust        

    Languages --
      Rust log10 performance is AMAZING on Windows  - best single metric on Windows overall. 
      gcc vs Rust on Windows sucks only because of log10 otherwise it is fast
      php Strings on Windows and Linux are better than Rust Strings
      Python just sucks on performance no matter the platform
      Rust better than gcc on Windows only because of log10
      gcc blows the doors off Rust on linux, well not like Rust's log10 performance.
      php is a better language than people think.
      Rust warnings and errors are annoying.
      Rust requires a larger program size on Linux about 4mb vs the gcc one on Linux.
      You have to jump through more hoops in Rust to do what you want to do or did do in C.
      Of course one of the first things I did in Rust was unsafe, read the binary file of integers into an array of unsigned integers.  That made me feel good!
      
      
    If you are going to ask why I didn't use vectors -  I wanted the simplest data structures I could use.  In C, you have to write your own data structures and for this I would have cheated using a FIFO queue instead of a vector.  
    You can't go wrong with bitwise & over modulo % for numbers which are exponent of 2 (ie... 2,4,8,16,32,64,....) in any language.
    Compiled languages seem to optimize modulo of numbers which are 2**n.
    Strings are SLOW, anyone using numeric values as strings for a coding short cut is NOT a LeetCoder.  
   
    
    I may check out clang comparisons.  It should be faster than gcc on linux and lighter weight.  I may even do some llvm and intel compilations.
    Python log functions are SLOW, but iterative division is real slow in Python while recursive division is not.
    
   
   
 --- limits.h
CHAR_BIT        8       Defines the number of bits in a byte.
SCHAR_MIN       -128    Defines the minimum value for a signed char.
SCHAR_MAX       +127    Defines the maximum value for a signed char.
UCHAR_MAX       255     Defines the maximum value for an unsigned char.
CHAR_MIN        -128    Defines the minimum value for type char and its value will be equal to SCHAR_MIN if char represents negative values, otherwise zero.
CHAR_MAX        +127    Defines the value for type char and its value will be equal to SCHAR_MAX if char represents negative values, otherwise UCHAR_MAX.
MB_LEN_MAX      16      Defines the maximum number of bytes in a multi-byte character.
SHRT_MIN        -32768  Defines the minimum value for a short int.
SHRT_MAX        +32768  Defines the maximum value for a short int.
USHRT_MAX       65535   Defines the maximum value for an unsigned short int.
INT_MIN         -2147483648      Defines the minimum value for an int.
INT_MAX         +2147483647      Defines the maximum value for an int.
UINT_MAX        4294967295        Defines the maximum value for an unsigned int.
LONG_MIN        -9223372036854775808    Defines the minimum value for a long int.
LONG_MAX        +9223372036854775808    Defines the maximum value for a long int.
ULONG_MAX       18446744073709551615    Defines the maximum value for an unsigned long int.


--- File Shit

fp=fopen("filename", "wb");  # Write Binary
fp=fopen("filename", "w");  # write
fp=fopen("filename", "rb");  # Read Binary
fp=fopen("filename", "r");  # Read Text  
